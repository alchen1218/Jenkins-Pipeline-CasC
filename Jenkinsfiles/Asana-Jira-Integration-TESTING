pipeline {
    triggers {
        pollSCM('*/15 * * * *')
    }
    agent {
        label "non-fdb-test"
    }
    environment {
        PATH = "/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
    }
    options {
        timestamps()
        ansiColor("xterm")
    }
    stages {
        stage("Initialization") {
            steps {
                buildName "#${BUILD_NUMBER}"
                buildDescription "Executed @ ${NODE_NAME}"
                cleanWs()
            }
        }
        stage('Check out #helloworld repo 1') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', 
                        relativeTargetDir: 'asana-jira-integration-TESTING']], submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: '98834d5d-1e71-46c5-9f67-ab42d52b3f0d',
                        url: 'git@github.com:alchen1218/Hello-World.git']]])

            }
        }

        stage('Check out #helloworld repo 2') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                        doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', 
                        relativeTargetDir: 'terraform-TESTING']], submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: '98834d5d-1e71-46c5-9f67-ab42d52b3f0d',
                        url: 'git@github.com:alchen1218/Hello-World.git']]])
            }
        }
        stage('Run script in repo 1 which will execute script in repo 2'){
            steps {
                sh "ls"
                sh "terraform --version"
                sh "terragrunt --version"
                sh "./asana-jira-integration-TESTING/build_and_deploy.sh"
            }
        }
    }
    post {
        always {
            echo "One way or another, I have finished"
        }
        success {
            slackSend(color: "good",
                      channel: "#testing-jenkinsfile-pipeline",
                      message: "SUCCESSFUL: ${env.JOB_NAME}: (<${env.BUILD_URL}|Open>)")
        }
        failure {
            slackSend(color: "danger",
                      channel: "#testing-jenkinsfile-pipeline",
                      message: "FAILED: ${env.JOB_NAME}: (<${env.BUILD_URL}|Open>)")

        }
        aborted {
            slackSend(color: "bad",
                      channel: "#testing-jenkinsfile-pipeline",
                      message: "ABORTED: ${env.JOB_NAME}: (<${env.BUILD_URL}|Open>)")
        }
    }
}
